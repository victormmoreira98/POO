{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\f0\fs22\lang22 O que \'e9 programa\'e7\'e3o orientada a objetos?\par
{\pntext\f0 2.\tab}Quais s\'e3o os pilares da programa\'e7\'e3o orientada a objetos?\par
{\pntext\f0 3.\tab}O que \'e9 uma classe em Java?\par
{\pntext\f0 4.\tab}Como criar um objeto a partir de uma classe em Java?\par
{\pntext\f0 5.\tab}O que faz a palavra new no Java?\par
{\pntext\f0 6.\tab}Quais as semelhan\'e7as entre Java e C?\par
{\pntext\f0 7.\tab}Quais as diferen\'e7as entre Java e C?\par
{\pntext\f0 8.\tab}O que \'e9 a classe InputReader e qual \'e9 a sua fun\'e7\'e3o no programa?\par
{\pntext\f0 9.\tab}Qual \'e9 a finalidade do m\'e9todo readDouble na classe InputReader?\par
{\pntext\f0 10.\tab}O que \'e9 a interface PaymentType e como ela \'e9 utilizada no programa?\par
{\pntext\f0 11.\tab}Como a classe PaymentTypeSelector \'e9 respons\'e1vel por selecionar o tipo de pagamento a ser utilizado?\par
{\pntext\f0 12.\tab}Qual \'e9 a rela\'e7\'e3o entre a classe PaymentTypeSelector e as classes PixPayment, CreditPayment e BoletoPayment?\par
{\pntext\f0 13.\tab}O que \'e9 polimorfismo e como ele \'e9 utilizado no programa?\par
{\pntext\f0 14.\tab}Qual \'e9 a finalidade do m\'e9todo getName na interface PaymentType e nas classes que a implementam?\par
{\pntext\f0 15.\tab}O que \'e9 a classe Scanner e como ela \'e9 utilizada no programa?\par
{\pntext\f0 16.\tab}O que \'e9 uma exce\'e7\'e3o e como ela \'e9 tratada no m\'e9todo selectPaymentType da classe PaymentTypeSelector?\par
{\pntext\f0 17.\tab}Como seria poss\'edvel adicionar um novo tipo de pagamento ao programa?\par
{\pntext\f0 18.\tab}Qual \'e9 a import\'e2ncia de utilizar interfaces no desenvolvimento de sistemas orientados a objetos?\par
{\pntext\f0 19.\tab}Qual \'e9 a diferen\'e7a entre uma classe abstrata e uma interface?\par
{\pntext\f0 20.\tab}O que \'e9 encapsulamento e como ele \'e9 aplicado no programa?\par
{\pntext\f0 21.\tab}Como seria poss\'edvel melhorar a legibilidade do programa?\par
{\pntext\f0 22.\tab}Qual \'e9 a finalidade da classe Main no programa?\par
{\pntext\f0 23.\tab}O que \'e9 um construtor padr\'e3o e quando ele \'e9 utilizado?\par
{\pntext\f0 24.\tab}Como \'e9 poss\'edvel proteger o programa contra erros de entrada do usu\'e1rio?\par
{\pntext\f0 25.\tab}Qual \'e9 a import\'e2ncia de utilizar nomes descritivos para as classes, m\'e9todos e vari\'e1veis?\par
{\pntext\f0 26.\tab}O que \'e9 heran\'e7a e como ela pode ser aplicada no programa?\par
{\pntext\f0 27.\tab}Como \'e9 poss\'edvel utilizar a sobrecarga de m\'e9todos no programa?\par

\pard\sa200\sl276\slmult1\par
1.Programa\'e7\'e3o orientada a objetos \'e9 um paradigma de programa\'e7\'e3o que se baseia na ideia de que um programa pode ser constru\'eddo como um conjunto de objetos que interagem entre si. Cada objeto possui suas pr\'f3prias caracter\'edsticas e comportamentos, e essas caracter\'edsticas e comportamentos s\'e3o definidos por meio de classes.\par
\par
2.Os pilares da programa\'e7\'e3o orientada a objetos s\'e3o:\par
\par
Encapsulamento: processo de esconder as informa\'e7\'f5es de uma classe para proteg\'ea-las de modifica\'e7\'f5es externas e garantir que apenas os m\'e9todos da classe possam acess\'e1-las;\par
Heran\'e7a: processo de cria\'e7\'e3o de uma nova classe a partir de uma classe j\'e1 existente, com o objetivo de reutilizar o c\'f3digo e adicionar novas funcionalidades;\par
Polimorfismo: habilidade de um objeto de uma classe ser tratado como um objeto de uma classe diferente, possibilitando a cria\'e7\'e3o de c\'f3digo gen\'e9rico e flex\'edvel.\par
\par
3.Em Java, uma classe \'e9 uma estrutura que define um conjunto de atributos e m\'e9todos que ser\'e3o compartilhados por todos os objetos criados a partir dessa classe.\par
\par
4.Para criar um objeto a partir de uma classe em Java, \'e9 necess\'e1rio utilizar a palavra-chave "new", seguida do nome da classe e dos par\'eanteses vazios, como por exemplo: "MinhaClasse obj = new MinhaClasse();".\par
\par
5.A palavra "new" \'e9 utilizada para alocar mem\'f3ria para um novo objeto e invocar o construtor da classe para inicializar seus atributos.\par
\par
6.Java e C s\'e3o ambas linguagens de programa\'e7\'e3o de alto n\'edvel, com sintaxes parecidas e muitas funcionalidades semelhantes. Ambas suportam programa\'e7\'e3o orientada a objetos, possuem suporte a tipos de dados primitivos e estruturas de controle de fluxo, por exemplo.\par
\par
7.As diferen\'e7as entre Java e C incluem a maneira como as linguagens s\'e3o compiladas e executadas, com Java usando uma m\'e1quina virtual para garantir a portabilidade do c\'f3digo, enquanto C \'e9 compilado diretamente para o sistema operacional; al\'e9m disso, Java \'e9 uma linguagem fortemente tipada, enquanto C \'e9 uma linguagem fracamente tipada.\par
\par
8.A classe InputReader \'e9 uma classe utilit\'e1ria que l\'ea dados de entrada do usu\'e1rio e os converte para diferentes tipos de dados. Sua fun\'e7\'e3o no programa \'e9 capturar as informa\'e7\'f5es inseridas pelo usu\'e1rio para que o programa possa process\'e1-las.\par
\par
9-O m\'e9todo readDouble na classe InputReader \'e9 respons\'e1vel por ler um valor num\'e9rico de ponto flutuante (double) inserido pelo usu\'e1rio e retornar esse valor.\par
\par
10-A interface PaymentType define um conjunto de m\'e9todos que devem ser implementados pelas classes que representam os diferentes tipos de pagamento suportados pelo programa. Ela \'e9 utilizada para garantir que cada classe de pagamento possua as mesmas funcionalidades b\'e1sicas.\par
\par
11-A classe PaymentTypeSelector \'e9 respons\'e1vel por receber as informa\'e7\'f5es de pagamento do usu\'e1rio e selecionar o tipo de pagamento correto a ser utilizado, com base nessas informa\'e7\'f5es.\par
\par
12-A classe PaymentTypeSelector utiliza a heran\'e7a para estabelecer uma rela\'e7\'e3o de "\'e9-um" com as classes PixPayment, CreditPayment e BoletoPayment, que representam diferentes tipos de pagamento.\par
\par
13-Polimorfismo \'e9 a capacidade de objetos de diferentes classes serem tratados como se fossem do mesmo tipo. Isso significa que um objeto pode assumir diferentes formas dependendo do contexto em que \'e9 usado. No programa em quest\'e3o, o polimorfismo \'e9 utilizado para permitir que diferentes tipos de pagamento sejam tratados de maneira uniforme, usando a interface PaymentType. As classes PixPayment, CreditPayment e BoletoPayment implementam a interface PaymentType e podem ser usadas indistintamente no c\'f3digo que as trata como um objeto do tipo PaymentType, permitindo que diferentes tipos de pagamento sejam selecionados e processados de maneira gen\'e9rica e flex\'edvel.\par
\par
\par
\par
\par
14-O m\'e9todo getName \'e9 respons\'e1vel por retornar o nome do tipo de pagamento. Ele \'e9 definido na interface PaymentType e implementado em suas classes filhas (PixPayment, CreditPayment e BoletoPayment). A finalidade desse m\'e9todo \'e9 permitir que o tipo de pagamento selecionado seja exibido de forma leg\'edvel para o usu\'e1rio, tanto na sele\'e7\'e3o como na confirma\'e7\'e3o do pagamento.\par
\par
\par
\par
\par
15-A classe Scanner \'e9 uma classe do pacote java.util que \'e9 utilizada para ler a entrada de dados do usu\'e1rio. No programa, ela \'e9 utilizada para ler a entrada do usu\'e1rio durante a escolha do tipo de pagamento.\par
\par
16-Uma exce\'e7\'e3o \'e9 um evento que ocorre durante a execu\'e7\'e3o de um programa que interrompe o fluxo normal de execu\'e7\'e3o do programa. No m\'e9todo selectPaymentType da classe PaymentTypeSelector, uma exce\'e7\'e3o \'e9 lan\'e7ada caso o usu\'e1rio selecione um tipo de pagamento inv\'e1lido. Essa exce\'e7\'e3o \'e9 tratada com o uso do bloco try-catch, que captura a exce\'e7\'e3o e exibe uma mensagem de erro para o usu\'e1rio.\par
\par
17-Para adicionar um novo tipo de pagamento ao programa, seria necess\'e1rio criar uma nova classe que implementa a interface PaymentType. Essa classe deve conter a l\'f3gica espec\'edfica para o novo tipo de pagamento. Em seguida, a classe PaymentTypeSelector deve ser atualizada para incluir a op\'e7\'e3o do novo tipo de pagamento no menu de sele\'e7\'e3o.\par
\par
18-As interfaces s\'e3o importantes no desenvolvimento de sistemas orientados a objetos porque elas permitem que diferentes classes implementem o mesmo conjunto de m\'e9todos, o que aumenta a flexibilidade do sistema e permite que novas classes sejam adicionadas facilmente sem afetar outras partes do sistema.\par
\par
19-Uma classe abstrata \'e9 uma classe que n\'e3o pode ser instanciada, mas pode ser usada como uma classe base para outras classes. Ela pode conter m\'e9todos concretos e abstratos, al\'e9m de vari\'e1veis de inst\'e2ncia. J\'e1 uma interface \'e9 uma cole\'e7\'e3o de m\'e9todos abstratos que n\'e3o possuem implementa\'e7\'e3o. Ela \'e9 usada para definir um conjunto de m\'e9todos que as classes que a implementam devem fornecer.\par
\par
20-Encapsulamento \'e9 o conceito de ocultar a implementa\'e7\'e3o interna de uma classe e expor somente uma interface p\'fablica. No programa, o encapsulamento \'e9 aplicado por meio do uso de modificadores de acesso, como private e public, que controlam o acesso aos membros da classe. Isso permite que a implementa\'e7\'e3o interna da classe seja alterada sem afetar outras partes do sistema que utilizam a classe.\par
\par
21-Para melhorar a legibilidade do programa, seria poss\'edvel utilizar nomes de vari\'e1veis mais descritivos, dividir as classes em arquivos separados, adicionar coment\'e1rios ao c\'f3digo e seguir conven\'e7\'f5es de nomenclatura e formata\'e7\'e3o de c\'f3digo estabelecidas.\par
\par
22-A classe Main \'e9 a classe principal do programa e \'e9 respons\'e1vel por iniciar a execu\'e7\'e3o do programa. Ela cont\'e9m o m\'e9todo main, que \'e9 o ponto de entrada do programa.\par
\par
23-Um construtor padr\'e3o \'e9 um construtor que n\'e3o recebe nenhum argumento. Ele \'e9 utilizado quando nenhum outro construtor \'e9 definido explicitamente na classe e \'e9 necess\'e1rio criar uma inst\'e2ncia da classe.\par
\par
24-Uma das formas de proteger o programa contra erros de entrada do usu\'e1rio \'e9 implementar verifica\'e7\'f5es de valida\'e7\'e3o nos dados inseridos pelo usu\'e1rio. Isso pode ser feito por meio da utiliza\'e7\'e3o de condicionais que verificam se o valor inserido pelo usu\'e1rio est\'e1 dentro dos limites esperados ou se segue um formato espec\'edfico. Al\'e9m disso, \'e9 poss\'edvel utilizar exce\'e7\'f5es para tratar erros de entrada do usu\'e1rio e exibir mensagens de erro claras e informativas para ajudar o usu\'e1rio a corrigir o problema.\par
\par
Outra abordagem \'e9 fornecer sugest\'f5es e valida\'e7\'f5es em tempo real para ajudar o usu\'e1rio a inserir as informa\'e7\'f5es corretamente, como dicas de preenchimento e verifica\'e7\'e3o de erros \'e0 medida que o usu\'e1rio digita os dados. Isso pode ser implementado por meio de elementos de interface do usu\'e1rio, como caixas de di\'e1logo e mensagens de erro, ou por meio de valida\'e7\'e3o de formul\'e1rios em tempo real.\par
\par
\par
25-A utiliza\'e7\'e3o de nomes descritivos para as classes, m\'e9todos e vari\'e1veis \'e9 importante para tornar o c\'f3digo mais leg\'edvel e compreens\'edvel para outros programadores que possam precisar trabalhar no mesmo projeto ou dar manuten\'e7\'e3o no c\'f3digo. Al\'e9m disso, nomes descritivos ajudam a tornar o c\'f3digo mais organizado e f\'e1cil de entender, o que pode facilitar a identifica\'e7\'e3o de erros e problemas durante a fase de desenvolvimento. Nomes claros e concisos tamb\'e9m podem ajudar a evitar ambiguidades e confus\'f5es que possam surgir ao lidar com v\'e1rias classes e m\'e9todos diferentes no mesmo programa.\par
\par
\par
26-No exerc\'edcio apresentado, foi proposto o desenvolvimento de um programa de pagamentos que utiliza programa\'e7\'e3o orientada a objetos. Foram abordados conceitos como classes, objetos, interfaces, heran\'e7a, polimorfismo, encapsulamento e exce\'e7\'f5es. O programa permite selecionar entre diferentes tipos de pagamento (Pix, boleto ou cart\'e3o de cr\'e9dito) e realizar uma transa\'e7\'e3o de pagamento. Tamb\'e9m s\'e3o apresentadas considera\'e7\'f5es sobre a seguran\'e7a de dados financeiros e a import\'e2ncia de nomes descritivos para facilitar a legibilidade e manuten\'e7\'e3o do c\'f3digo.\par
\par
27-A sobrecarga de m\'e9todos \'e9 uma t\'e9cnica de programa\'e7\'e3o que permite criar dois ou mais m\'e9todos com o mesmo nome, por\'e9m com par\'e2metros diferentes. No programa em quest\'e3o, pode-se utilizar a sobrecarga de m\'e9todos para criar diferentes construtores para as classes de pagamento, de forma a permitir a cria\'e7\'e3o desses objetos com diferentes combina\'e7\'f5es de informa\'e7\'f5es. Por exemplo, pode-se criar um construtor que recebe apenas o valor a ser pago e outro que recebe o valor, a data de vencimento e o nome do pagador. Dessa forma, o programa se torna mais flex\'edvel e capaz de atender a diferentes necessidades dos usu\'e1rios.\par
\par
\par
\par
}
 